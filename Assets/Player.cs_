using UnityEngine;
using System.Collections;

public class Player : MonoBehaviour {

    public Color color;
    public MeshRenderer GorroMaterial;

	public Material Gorro1;
	public Material Gorro2;
	public Material Gorro3;
	public Material Gorro4;

	private Game game;
	private Gui gui;

    public GameObject particles;

    public int id; //numero de player;
   // public EnergyBar progressBar;

  //  [HideInInspector]
	public Weapon weapon;
	public Weapon weaponToInstantiate;
    public GameObject weaponContainer;

    [HideInInspector]
    public Transport transport;
    public Transport[] transports;
    public GameObject transportContainer;

    public fxStates fxState;

	public bool canJump = false;

    private CharacterBehavior characterBehavior;
    private IEnumerator progressBarCoroutine;

    public enum fxStates
    {
        NORMAL,
        SUPER
    }

   // public float energy = 90;
    private Material originalMaterial;
    public CharactersManager charactersManager;

 //   public EnergyBar energyBar;

	void Start()
	{
		Data.Instance.events.OnAvatarDie += OnAvatarDie;
		Data.Instance.events.OnMissionStart += OnMissionStart;
		Data.Instance.events.OnListenerDispatcher += OnListenerDispatcher;
		Data.Instance.events.OnAvatarGetItem += OnAvatarGetItem;
		Data.Instance.events.OnAvatarProgressBarEmpty += OnAvatarProgressBarEmpty;
		Data.Instance.events.OnChangeWeapon += OnChangeWeapon;
	}
    void OnDestroy()
    {
        Data.Instance.events.OnChangeWeapon -= OnChangeWeapon;
        Data.Instance.events.OnAvatarDie -= OnAvatarDie;
        Data.Instance.events.OnMissionStart -= OnMissionStart;
        Data.Instance.events.OnListenerDispatcher -= OnListenerDispatcher;
        Data.Instance.events.OnAvatarGetItem -= OnAvatarGetItem;
        Data.Instance.events.OnAvatarProgressBarEmpty -= OnAvatarProgressBarEmpty;
    }
    public void Init(int id)
    {
        charactersManager = Game.Instance.GetComponent<CharactersManager>();
		color = Data.Instance.GetComponent<MultiplayerData>().colors[Mathf.Abs(id)];

       // if (Data.Instance.isArcadeMultiplayer)
		switch (id) {
		case 0:
			GorroMaterial.material = Gorro1;
			break;
		case 1:
			GorroMaterial.material = Gorro2;
			break;
		case 2:
			GorroMaterial.material = Gorro3;
			break;
		case 3:
			GorroMaterial.material = Gorro4;
			break;
		}

        characterBehavior = GetComponent<CharacterBehavior>();
        if (id == 0)
            originalMaterial = Resources.Load("Materials/BolaHead", typeof(Material)) as Material;
        else
            originalMaterial = Resources.Load("Materials/Piel2", typeof(Material)) as Material;

       // setStartingState();
      //  Invoke("setStartingState2", 1);
        

        this.id = id;
       // this.energyBar = energyBar;
        weapon = Instantiate(weaponToInstantiate as Weapon, Vector3.zero, Quaternion.identity) as Weapon;
        weapon.SetColor(color);
        weapon.transform.parent = weaponContainer.transform;
        weapon.transform.localPosition = Vector3.zero;
        weapon.transform.localScale = Vector3.one*2;
        particles.SetActive(false);
        OnAvatarProgressBarEmpty();
    }
    void OnAvatarDie(CharacterBehavior cb)
    {
        if (progressBarCoroutine != null)
        {
            try
            {
                StopCoroutine(progressBarCoroutine);
                if (fxState == fxStates.SUPER)
                    OnAvatarProgressBarEmpty();
            } catch
            {
                Debug.Log("ERROR en OnAvatarDie");
            }
        }
        cb.Die();
    }
    public void OnAvatarProgressBarStart(Color color)
    {
        //if (progressBar.isOn) return;
      //  progressBar.Init(color);
      //  progressBar.gameObject.SetActive(true);
    }
    public void OnAvatarProgressBarEmpty()
    {

        //print("OnAvatarProgressBarEmpty " + fxState);
       // progressBar.gameObject.SetActive(false);

        if (fxState == fxStates.SUPER)
        {
            setNormalState();
            return;
        }

        foreach (Transform child in transportContainer.transform)  Destroy(child.gameObject);

        transport = null;
    }
    public void OnAvatarProgressBarUnFill(float qty )
    {
     //   progressBar.UnFill(qty);
    }
    private void OnAvatarGetItem(int playerID, Powerup.types item)
    {
		print ("OnAvatarGetItem" + playerID + " item :" + item);
        if (playerID != id) return;

        if (item == Powerup.types.MISSILE)
        {
            weapon.setOn();
        }
        else if (item == Powerup.types.JETPACK)
        {
            if (fxState == fxStates.SUPER) setNormalState();
            if (characterBehavior.state != CharacterBehavior.states.JETPACK)
            {
                transport = Instantiate(transports[0] as Transport, Vector3.zero, Quaternion.identity) as Transport;
                transport.transform.parent = transportContainer.transform;
                transport.transform.localPosition = Vector3.zero;
                transport.transform.localEulerAngles = Vector3.zero;
                transport.transform.localScale = Vector3.one;
                Data.Instance.events.AdvisesOn("JETPACK!");
                Data.Instance.events.VoiceFromResources("jetpack_Activado");
            }
            OnAvatarProgressBarStart(Color.green);
        }
        else if (item == Powerup.types.INVENSIBLE)
        {
            print("INVENSIBLE player id: " + id);
            if (gameObject == null) return;
            if (characterBehavior.state == CharacterBehavior.states.JETPACK) return;
			SetInvensible ();                   
        }
    }
	public void SetInvensible()
	{
		if (fxState == fxStates.SUPER) return;
		setSuperState();
		Data.Instance.events.AdvisesOn("INVENSIBLE!");
		OnAvatarProgressBarStart(Color.blue);
		//   progressBar.SetTimer(0.2f);
		progressBarCoroutine = StartProgressBarCoroutine();
		StartCoroutine(progressBarCoroutine);    
	}
    IEnumerator StartProgressBarCoroutine()
    {
        yield return new WaitForSeconds(6);
        OnAvatarProgressBarEmpty();
    }
   private void OnListenerDispatcher(string message)
    {
        if (message == "ShowMissionName")
			OnMissionStart(Data.Instance.missions.MissionActiveID);
   }
   public void OnMissionStart(int missionID)
   {

       if (Data.Instance.DEBUG 
			|| Data.Instance.playMode == Data.PlayModes.COMPETITION)
       {
           canJump = true;
       }
       else
       {

           if (missionID > 1)
               canJump = true;
          // if (missionID > 4)
             //  canShoot = true;

           if (missionID < 5)
               weapon.setOff();
           else
               weapon.setOn();
       }
   }
   private void setStartingState()
   {
       fxState = fxStates.SUPER;
       gameObject.layer = LayerMask.NameToLayer("SuperFX");
   }
   private void setStartingState2()
   {
       fxState = fxStates.NORMAL;
       gameObject.layer = LayerMask.NameToLayer("Character");
   }
    private void setNormalState()
    {
        print("____setNormalState_setNormalState_setNormalState_setNormalState");
       // Data.Instance.events.OnChangeMood(1);
        Data.Instance.events.OnAvatarChangeFX(Player.fxStates.NORMAL);
        fxState = fxStates.NORMAL;
        gameObject.layer = LayerMask.NameToLayer("Character");
        particles.SetActive(false);        
    }
    private void setSuperState()
    {
       // Data.Instance.events.OnChangeMood(2);
        
        Data.Instance.events.OnAvatarChangeFX(Player.fxStates.SUPER);
        fxState = fxStates.SUPER;
        
        gameObject.layer = LayerMask.NameToLayer("SuperFX");
        particles.SetActive(true);
    }
    void OnChangeWeapon(int playerID, Weapon.types type)
    {       
        if (playerID != id) return;    

        Missil missil =  weapon.GetComponent<Missil>();



        if (missil)
            missil.OnChangeWeapon(type);
    }
}
